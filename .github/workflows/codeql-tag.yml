# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL Tag Scan"

on:
  push:
    # Pattern matched against refs/tags
    tags:        
      - 'v**'
jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: javascript-typescript
          build-mode: none
          category: js
        - language: python
          build-mode: none
          category: py
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      id: init
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    - if: matrix.build-mode == 'manual'
      shell: bash
      run: |
        echo 'If you are using a "manual" build mode for one or more of the' \
          'languages you are analyzing, replace this with the commands to build' \
          'your code, for example:'
        echo '  make bootstrap'
        echo '  make release'
        exit 1

    # Uploads against tag which is the current `GITHUB_REF`
    - name: Perform CodeQL Analysis
      id: analyze
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"

    # Not supported: Aborting upload: only one run of the codeql/analyze or codeql/upload-sarif actions is allowed per job per tool/category. The easiest fix is to specify a unique value for the `category` input. If .runs[].automationDetails.id is specified in the sarif file, that will take precedence over your configured `category`. Category: (/language:javascript-typescript/) Tool: (CodeQL)
    # - name: Fetch default branch
    #   id: default_branch
    #   run: |
    #     DEFAULT_BRANCH=$(gh api /repos/${{ github.repository }} | jq -r '"refs/heads/\(.default_branch)"')
    #     echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
    # - name: Upload against default branch
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     ref: ${{ env.DEFAULT_BRANCH }}
    #     #sha: ${{ github.sha }} - this should match if performing trunk based development/tagging no need to specify unless we want to gaurd explicitly via git commands

    # this is just a sample to show how to programatically override
    - name: Set SARIF Category
      run: | 
        CODEQL=${{ steps.init.outputs.codeql-path }}
        lang=$($CODEQL resolve languages --extractor-include-aliases --format=betterjson | jq -r '.aliases["${{ matrix.language }}"] // "${{ matrix.language }}"')
        
        # Category
        automationId="${{ matrix.category }}"
        sarifFilePath="${{ steps.analyze.outputs.sarif-output }}/$lang.sarif"
        
        # Process the SARIF file with jq and ovewrite the file with proper category
        jq --arg id "$automationId" '
            .runs |= map(
                if .automationDetails.id then
                    .automationDetails.id = $id
                else
                    .automationDetails += {id: $id}
                end
            )
        ' "$sarifFilePath" > "${sarifFilePath}.tmp" && mv "${sarifFilePath}.tmp" "$sarifFilePath"

    # Uses codeql cli tool to upload results to the default branch ref
    - name: CodeQL results upload
      env:
        GH_TOKEN: ${{ github.token }}     #for gh api
        GITHUB_TOKEN: ${{ github.token }} #for codeql github upload-results
      run: |
        CODEQL=${{ steps.init.outputs.codeql-path }}
        defaultbranch=$(gh api /repos/${{ github.repository }} | jq -r '"refs/heads/\(.default_branch)"')
        lang=$($CODEQL resolve languages --extractor-include-aliases --format=betterjson | jq -r '.aliases["${{ matrix.language }}"] // "${{ matrix.language }}"')
        echo "Branch: $defaultbranch,  language: $lang"
        $CODEQL github upload-results \
          --sarif="${{ steps.analyze.outputs.sarif-output }}/$lang.sarif" \
          --repository="${{ github.repository }}" \
          --ref="$defaultbranch" \
          --commit=${{ github.sha }}        

    - name: Upload CodeQL Analysis
      uses: actions/upload-artifact@v3
      with:
        path: ${{runner.workspace}}/results/*.sarif
          
